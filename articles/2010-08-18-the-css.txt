--- 
title: The CSS
date: 18/08/2010



         

	 .ninja {color:black; visibility:hidden}
	"CSS doesn't suck, you're just doing it wrong!"
	
	- Nicole Sullivan.
	
	
 
              
              Selector: {property:value}
              
                  #id
                  Match by id
                  tag
                  Match by tag name
                  .class
                  Match by class name
                  #myid .myclass
                  Matches any .myclass that is a descendant of #myid
                  .myclass #myid
                  WTF?
                  h2 + h3
                  Matches any h3 element immediately preceded by a sibling element h2
                  { E:active
                        E:hover
                        E:focus }
                  Matches E during certain user actions
                  E[foo]
                  Matches any E element with the "foo" attribute set (whatever the value).
                  E[foo="warning"]
                  Matches any E element whose "foo" attribute value is exactly equal to "warning".
                  E:first-child
                  Matches element E when E is the first child of its parent.
               
              Check out http://www.w3.org/TR/css3-selectors/ for more info on CSS1/CSS2/CSS3 selectors.            
          
          
          
              
                  Box model #1
              
              
                  
                  Box model #2
                  
                      	Content &gt; Padding &gt; Border &gt; Background image &gt; Background color &gt; margin
          
          
          
              
                  Avoid inline styles
              
              
                  
                      NO
                      
			&lt;div style="color:red;float:left;margin-top:20px"/&gt;
								
                      YES
                      
			&lt;div class="humongus"/&gt;
								
                      
                      
                          We strive to maintain proper separation of content and design, and therefore highly discourage the use of inline style="..." attributes. This not only makes maintenance a nightmare, but inextricably ties the presentation to the data it represents.
                      
- Paul Irish et al. http://molecularvoices.molecular.com/standards/
                  
                  
                      
                          Make CSS external
                      &lt;link rel="stylesheet" type="text/css" href="mystylesheet.css" /&gt;
                  
				What about @import?
						
			                        @import url('screen.css');
			             

			Don't use @import (if you want stylesheets to download in parallel resulting in a faster page).

			
              
          
          
          
              
                  Text sizing: Px or em's?
              
Em's are relative and scalable. Pixels are not.
How to calculate em's
    Start by defining a base font size. The browser's default font size is in most cases 16px.

              
body { font-size:100% } /*Setting the base type size to the browser's default, which in most cases is 16px. 	1em is now 16px*/
body { font-size:75% } /* 75% of 16px (browser default) = 12. 													1em is now 12px */     
body { font-size:62.5% } /* 62.5% of 16px (browser default) = 10. 												1em is now 10px */

If a user decides to bump up the browser's default font size, the CSS would increase with her preference.
            
Formula for calculating em's based on context: Target (px) / context (px) = result (em)
If the context (size) is 16px. what is 20px expressed in relative em's?
	Answer: 20px / 16px = 1.25em.
	
	What not to do with em's
	     
div {font-size:1.5em}	     	
	     
	...what do you think will happen if you're nesting several div's?
	Some text
			Some text
					Some text
							Some text
							
					
			
		
          
          
          
              
                  TRBL (Top right bottom left)
              
              
                  
                      .box {padding: 10px 20px 20px 20px}
                  
                  
                      
                          
                              Padding?
                          
                      
                  
                  
                      
                          Shorthand
                      
                  
                  .box {padding:10px 20px;}
                  
					        /* adds a 10px margin to all four sides */
					        element {
					          margin:10px;
					        }

					        /* adds a 20px margin to top and bottom and a 5px margin to left and right */
					        element {
					          margin:20px 5px;
					        }

					        /* adds a 50px margin to top, a 10px margin to left and right, and a 300px margin to bottom */
					        element {
					          margin:50px 10px 300px;
					        }

					
                  
              
          
          
          CSS and accessibility: Positioning content off-screen (skip links, hidden labels etc)
              
                  
                  
                      NO
                      
		                        .hidden {display:none}
		                    
                      YES
                      
		.hidden {
			position:absolute; 
			left:-10000px; top:auto; 
			width:1px; 
			height:1px; 
			overflow:hidden;
		}
		
                  
              
          
          
          Semantic approach
	
		Don't create class names and id's based on what something looks like or how it's floated - but try to describe the content instead.
		
				The good			
		
		.container { .. }
		.menu { .. }
		.byline { .. }
		.caption { .. }

		.article { .. } /* If not using HTML5 - why not create class names etc based on HTML5 elements? */
		.nav { .. }	
		.section { .. }
		.footer { .. }
					
		
		
		The bad

.leftContent {
	float:right;	
	}
		
.rightBar { 
	float: left;
	 }	

			
			The ugly
				
.whiteContainer {
		background-color: black;
		color: red;
		font-size:1em;
	}
	
.whiteContainer .DIVwithDottedBorderAndShaddowBackground {
	border:none; 	
	}
	
.whiteContainer .DIVwithDottedLineAndShaddow.yellowSmallText {
	background-image:none !important;
	border: 5px solid red;
	font-size: 2em;	
	}										
				

		CSS coding: semantic approach in naming convention
	
	
          
          Floats
	
	Un√∏dvendig??
	
	
          
		  Clearing floats
			
				Example problem
					If a floated element is higher than the nonfloated container, it will escape outside the container.
					
					
						I'm a container - surrounding two floated div's.
						
							I'm floating left!
						
					
						I'm floating right!
					
					
					
					
				
					How to fix it?
					
						Define a height for the container?
						Apply float (and width)?
						Overflow:auto | hidden | scroll?
						Clearer div: &lt;div style="clear:both"/&gt?
						Apply clearfix!
					
					The clearfix explained
					.clearfix is not a very good name (no semantic meaning), so let's call it .group.

.group:after {
	content: ".";
	display:block;
	height:0;
	clear:both;
	visibility:hidden;
}

* html .group { /*Take care of IE6*/
	height:1%;	
}

*:first-child+html .group { /*... and IE7*/
	height:1px;	
}
/*IE8 actually supports :before and :after! #IE8WIN! */	

					
			
			
			Position is everything: How to clear floats without structural markup
				
			
			
          
          Position
          
          Object oriented
		 
          Reset.css
              Zeroing out the default styles that are applied by most browsers.

html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, dialog, figure, footer, header, hgroup, nav, section {margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline;}
	article, aside, dialog, figure, footer, header, hgroup, nav, section {display:block;}
	body {line-height:1.5;}
	table {border-collapse:separate;border-spacing:0;}
	caption, th, td {text-align:left;font-weight:normal;}
	table, td, th {vertical-align:middle;}
	blockquote:before, blockquote:after, q:before, q:after {content:"";}
	blockquote, q {quotes:"" "";}
	a img {border:none;}
 
Based on Eric Meyer's Reset CSS.
	Example code fetched from Blueprint CSS Framework (Copyright (c) 2007-Present).
	

          
		       
          Media queries
          
		   Print stylesheet
			
			
				&lt;link rel="stylesheet" href="print.css" type="text/css" media="print"&gt;
				
			
			The CSS

	body {line-height:1.5;font-family:"Helvetica Neue", Arial, Helvetica, sans-serif;color:#000;background:none;font-size:10pt;}
	.container {background:none;}
	hr {background:#ccc;color:#ccc;width:100%;height:2px;margin:2em 0;padding:0;border:none;}
	hr.space {background:#fff;color:#fff;visibility:hidden;}
	h1, h2, h3, h4, h5, h6 {font-family:"Helvetica Neue", Arial, "Lucida Grande", sans-serif;}
	code {font:.9em "Courier New", Monaco, Courier, monospace;}
	a img {border:none;}
	p img.top {margin-top:0;}
	blockquote {margin:1.5em;padding:1em;font-style:italic;font-size:.9em;}
	a:link, a:visited {background:transparent;font-weight:700;text-decoration:underline;}
	a:link:after, a:visited:after {content:" (" attr(href) ")";font-size:90%;}				
				

			
		 
		 CSS3
			- border radius (30) 
			- gradient
			- RGBA (56)
			- typekit o.l?


			        
          


          
          




          
          Touch
              http://trentwalton.com/2010/07/05/non-hover/
              
          
          
          Frameworks
          
          CSS sprites
              Pros
              
                  
              
              Cons
              
                  What if text resizes?
                  What if you want to change an icon?
              

	Sitepoint: CSS Sprites - Image Slicing‚Äôs Kiss of Death
	CSS Sprite Generator

          
	
	
          
          
          Less?
              http://www.catswhocode.com/blog/8-css-preprocessors-to-speed-up-development-time
              
              http://fadeyev.net/2010/06/19/lessjs-will-obsolete-css/
              
              Pros &amp; cons?
              
          






          
          Useful links
              
                  https://nanna.bekk.no/confluence/display/BEKK/Selvstudium+-+HTML+og+CSS
                  
                  https://nanna.bekk.no/confluence/display/BEKK/Kurs+-+Oppgaver+og+eksempler

              
          
          
      

